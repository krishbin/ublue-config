#!/bin/bash
## enable auto-unlock LUKS2 encrypted root on Fedora/Silverblue/maybe others
set -eou pipefail

[ "$UID" -eq 0 ] || { echo "This script must be run as root."; exit 1;}

echo "This script uses systemd-cryptenroll to enable TPM2 auto-unlock."
echo "You can review systemd-cryptenroll's manpage for more information."
echo "This script will modify your system."
echo "It will enable TPM2 auto-unlock of your LUKS partition for your root device!"
echo "It will bind to PCR 7 only which is tied to your secureboot state."
read -p "Are you sure are good with this and want to enable TPM2 auto-unlock? " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  [[ "$0" = "${BASH_SOURCE[0]}" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
fi

## Inspect Kernel Cmdline for rd.luks.uuid
RD_LUKS_UUID="$(xargs -n1 -a /proc/cmdline | grep rd.luks.uuid | cut -d = -f 2)"

# Check to make sure cmdline rd.luks.uuid exists
if [[ -z ${RD_LUKS_UUID:-} ]]; then
  printf "LUKS device not defined on Kernel Commandline.\n"
  printf "This is not supported by this script.\n"
  printf "Exiting...\n"
  exit 1
fi

# Check to make sure that the specified cmdline uuid exists.
if ! grep -q "${RD_LUKS_UUID}" <<< "$(lsblk)" ; then
  printf "LUKS device not listed in block devices.\n"
  printf "Exiting...\n"
  exit 1
fi

DISKS=(${RD_LUKS_UUID})
CRYPT_DISKS=()
# Cut off the luks-
LUKS_PREFIX="luks-"
for disk in ${DISKS[@]}; do
	if grep -q ^${LUKS_PREFIX} <<< "${disk}"; then
		CRYPT_DISKS+=("/dev/disk/by-uuid/"${disk#"$LUKS_PREFIX"})
	else
	  echo "LUKS UUID format mismatch for disk $disk."
	  echo "Exiting..."
	  exit 1
	fi
done

# Check to make sure crypt disk exists
for disk in ${CRYPT_DISKS[@]}; do
	if [[ ! -L "$disk" ]]; then
	  printf "LUKS device $disk not listed in block devices.\n"
	  printf "Exiting...\n"
	  exit 1
	fi
done


for disk in ${CRYPT_DISKS[@]}; do
  cryptsetup luksDump $disk | grep systemd-tpm2 > /dev/null
  if cryptsetup luksDump "$disk" | grep systemd-tpm2 > /dev/null; then
    KEYSLOT=$(cryptsetup luksDump "$disk"|grep -A29 systemd-tpm2|grep Keyslot|awk '{print $2}')
    echo "TPM2 already present in LUKS Keyslot $KEYSLOT of $disk."
    echo "Remove the existing TPM2 enrollment with ujust remove-luks-tpm2-autounlock"
    echo "Exiting..."
    [[ "$0" = "${BASH_SOURCE[0]}" ]] && exit 1 || return 1
  fi
done

## modify the crypttab
sed -i "s/discard/discard,tpm2-device=auto/" /etc/crypttab

## Run crypt enroll
echo "Enrolling TPM2 unlock requires your existing LUKS2 unlock password"
echo
for disk in ${CRYPT_DISKS[@]}; do
  echo "Enrolling TPM2 unlock for $disk"
  systemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=7 $disk
done

if lsinitrd 2>&1 | grep -q tpm2-tss > /dev/null; then
  ## add tpm2-tss to initramfs
  if rpm-ostree initramfs | grep tpm2 > /dev/null; then
    echo "TPM2 already present in rpm-ostree initramfs config."
    rpm-ostree initramfs
    echo "Re-running initramfs to pickup changes above."
  fi
  rpm-ostree initramfs --enable --arg=--force-add --arg=tpm2-tss
else
  ## initramfs already containts tpm2-tss
  echo "TPM2 already present in initramfs."
fi

## Now reboot
echo
echo "TPM2 LUKS auto-unlock configured. Reboot now."


# References:
#  https://www.reddit.com/r/Fedora/comments/uo4ufq/any_way_to_get_systemdcryptenroll_working_on/
#  https://0pointer.net/blog/unlocking-luks2-volumes-with-tpm2-fido2-pkcs11-security-hardware-on-systemd-248.html
